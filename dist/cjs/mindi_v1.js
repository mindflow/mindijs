"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var coreutil_v1=require("coreutil_v1");class InjectionPoint{static get INSTANCE_TYPE(){return 0}static get PROVIDER_TYPE(){return 1}static instanceByName(n,e,t=[]){return new InjectionPoint(n,e,InjectionPoint.INSTANCE_TYPE,t)}static instance(n,e=[]){return new InjectionPoint(n.name,n,InjectionPoint.INSTANCE_TYPE,e)}static provideryByName(n,e,t=[]){return new InjectionPoint(n,e,InjectionPoint.PROVIDER_TYPE,t)}static provider(n,e=[]){return new InjectionPoint(n.name,n,InjectionPoint.PROVIDER_TYPE,e)}constructor(n,e,t=InjectionPoint.INSTANCE_TYPE,o){this.name=n,this.classReference=e,this.type=t,this.parameters=o}getName(){return this.name}getClassReference(){return this.classReference}getType(){return this.type}getParameters(){return this.parameters}}const LOG=new coreutil_v1.Logger("Provider");class Provider{get(n=[]){return null}}class Config{getConfigEntries(){return null}getConfigProcessors(){return null}getInstanceProcessors(){return null}}class InstanceHolder{static get NEW_INSTANCE(){return 0}static get EXISTING_INSTANCE(){return 1}static holderWithNewInstance(n){return new InstanceHolder(n,InstanceHolder.NEW_INSTANCE)}static holderWithExistingInstance(n){return new InstanceHolder(n,InstanceHolder.EXISTING_INSTANCE)}constructor(n,e){this.instance=n,this.type=e}getInstance(){return this.instance}getType(){return this.type}}class TypeConfig{constructor(n,e){this.name=n,this.classReference=e}getClassReference(){return this.classReference}getName(){return this.name}instanceHolder(n=[]){return null}}const LOG$1=new coreutil_v1.Logger("ConfigAccessor");class ConfigAccessor{static instanceHolder(n,e,t=[]){const o=this.typeConfigByName(n,e);if(null===o)return LOG$1.error("No typeconfig found for "+n),null;const i=o.instanceHolder(t);return i||LOG$1.error("No object found for "+n),i}static typeConfigByName(n,e){let t=null;return e.getConfigEntries().forEach((e,o,i)=>{if(e===n)return t=o,!1;return!0},this),t||LOG$1.error("No config entry found for "+n),t}}const LOG$2=new coreutil_v1.Logger("ConfigProcessorExecutor");class ConfigProcessorExecutor{static execute(n,e,t){const o=new coreutil_v1.List;return n.forEach((n,i)=>{const r=ConfigAccessor.instanceHolder(n,t);r.getType()===InstanceHolder.NEW_INSTANCE&&e.injectTarget(r.getInstance(),t);const s=r.getInstance().processConfig(t);s&&o.add(s);return!0},this),Promise.all(o.getArray())}}class Injector{injectTarget(n,e,t=0){}}const LOG$3=new coreutil_v1.Logger("InstancePostConfigTrigger");class InstancePostConfigTrigger{process(n){n.postConfig&&n.postConfig()}}const LOG$4=new coreutil_v1.Logger("InstanceProcessorExecutor");class InstanceProcessorExecutor{static execute(n,e){e.getInstanceProcessors().forEach((t,o)=>{const i=ConfigAccessor.instanceHolder(t,e);i.getInstance().process(n);return!0},this)}}const LOG$5=new coreutil_v1.Logger("SingletonConfig");class SingletonConfig extends TypeConfig{static named(n,e){return new SingletonConfig(n,e)}static unnamed(n){return new SingletonConfig(n.name,n)}constructor(n,e){super(n,e)}instanceHolder(n=[]){return this.instance?InstanceHolder.holderWithExistingInstance(this.instance):(n&&n.length>0?this.instance=new this.classReference(...n):this.instance=new this.classReference,InstanceHolder.holderWithNewInstance(this.instance))}}class MindiProvider extends Provider{constructor(n,e,t){this.typeConfig=n,this.injector=e,this.config=t}get(n=[]){const e=this.typeConfig.instanceHolder(n);return e.getType()===InstanceHolder.NEW_INSTANCE&&this.injector.injectTarget(e.getInstance(),this.config),insatanceHolder.getInstance()}}const LOG$6=new coreutil_v1.Logger("MindiInjector");class MindiInjector extends Injector{static inject(n,e){INJECTOR.injectTarget(n,e)}static getInstance(){return INJECTOR}injectTarget(n,e,t=0){if(!n)throw Error("Missing target object");if(!e)throw Error("Missing config");if(!e.getFinalized())throw Error("Config not finalized");if(t>10)throw Error("Injection structure too deep");const o=this;Object.keys(n).forEach(function(i,r){n[i]instanceof InjectionPoint&&o.injectProperty(n,i,e,t)}),InstanceProcessorExecutor.execute(n,e)}injectProperty(n,e,t,o){if(n[e].getType()===InjectionPoint.PROVIDER_TYPE)return void this.injectPropertyProvider(n,e,t,o);this.injectPropertyInstance(n,e,t)}injectPropertyProvider(n,e,t){const o=n[e],i=ConfigAccessor.typeConfigByName(o.getName(),t);n[e]=new MindiProvider(i,this,t)}injectPropertyInstance(n,e,t,o){const i=n[e],r=ConfigAccessor.instanceHolder(i.getName(),t,i.getParameters());r.getType()===InstanceHolder.NEW_INSTANCE&&this.injectTarget(r.getInstance(),t,o++),n[e]=r.getInstance()}}const INJECTOR=new MindiInjector,LOG$7=new coreutil_v1.Logger("Config");class MindiConfig extends Config{constructor(){super(),this.finalized=!1,this.configEntries=new coreutil_v1.Map,this.configProcessors=new coreutil_v1.List,this.instanceProcessors=new coreutil_v1.List}merge(n){if(!n.getFinalized())throw Error("Cannot merge into an unfinalized config");const e=new coreutil_v1.Map;e.addAll(this.configEntries),e.addAll(n.getConfigEntries());const t=new coreutil_v1.List;t.addAll(this.configProcessors),t.addAll(n.getConfigProcessors());const o=new coreutil_v1.List;return o.addAll(this.instanceProcessors),o.addAll(n.getInstanceProcessors()),this.configEntries=e,this.configProcessors=t,this.instanceProcessors=o,this}addTypeConfig(n){return this.configEntries.set(n.getName(),n),this}addConfigProcessor(n){return this.configProcessors.add(n.name),this.addTypeConfig(SingletonConfig.unnamed(n))}addInstanceProcessor(n){return this.instanceProcessors.add(n.name),this.addTypeConfig(SingletonConfig.unnamed(n))}addAllTypeConfig(n){return n.forEach((n,e)=>{this.configEntries.set(n.getName(),n);return!0},this),this}addAllConfigProcessor(n){return n.forEach((n,e)=>{this.configProcessors.add(n.name);this.addTypeConfig(SingletonConfig.unnamed(n));return!0},this),this}addAllInstanceProcessor(n){return n.forEach((n,e)=>{this.instanceProcessors.add(n.name);this.addTypeConfig(SingletonConfig.unnamed(n));return!0},this),this}getConfigEntries(){return this.configEntries}getConfigProcessors(){return this.configProcessors}getInstanceProcessors(){return this.instanceProcessors}getFinalized(){return this.finalized}finalize(){return this.finalized=!0,ConfigProcessorExecutor.execute(this.getConfigProcessors(),MindiInjector.getInstance(),this)}}class PoolConfig extends TypeConfig{static named(n,e,t){return new PoolConfig(n,e,t)}static unnamed(n,e){return new PoolConfig(n.name,n,e)}constructor(n,e,t){super(n,e),this.poolSize=t}instanceHolder(n=[]){}}class PrototypeConfig extends TypeConfig{static named(n,e){return new PrototypeConfig(n,e)}static unnamed(n){return new PrototypeConfig(n.name,n)}constructor(n,e){super(n,e)}instanceHolder(n=[]){let e=null;return e=n&&n.length>0?new this.classReference(...n):new this.classReference,InstanceHolder.holderWithNewInstance(e)}}exports.Config=Config,exports.ConfigAccessor=ConfigAccessor,exports.ConfigProcessorExecutor=ConfigProcessorExecutor,exports.InjectionPoint=InjectionPoint,exports.Injector=Injector,exports.InstanceHolder=InstanceHolder,exports.InstancePostConfigTrigger=InstancePostConfigTrigger,exports.InstanceProcessorExecutor=InstanceProcessorExecutor,exports.MindiConfig=MindiConfig,exports.MindiInjector=MindiInjector,exports.MindiProvider=MindiProvider,exports.PoolConfig=PoolConfig,exports.PrototypeConfig=PrototypeConfig,exports.Provider=Provider,exports.SingletonConfig=SingletonConfig,exports.TypeConfig=TypeConfig;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
