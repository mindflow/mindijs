"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var coreutil_v1=require("coreutil_v1");class ConfigEntry{constructor(n,t,e){this.classReference=n,this.injectionType=t,this.poolSize=e,this.storedInstances=new coreutil_v1.List,this.instancePointer=0}preload(){if(this.instancePointer=0,"SINGLETON"===this.injectionType)this.storedInstances.add(new this.classReference);else if("POOL"===this.injectionType)for(i=0;i<this.poolSize;i++)this.storedInstances.add(new this.classReference);else if("PROTOTYPE"!==this.injectionType)throw"Unknown injectionType "+this.injectionType}getClassReference(){return this.classReference}getInjectionType(){return this.injectionType}getStoredInstances(){if(null===this.storedInstances)throw"Config entry has not been instansiated: "+this.classReference.name;return this.storedInstances}getInstance(n=[]){if("PROTOTYPE"===this.injectionType)return new this.classReference(...n);var t=this.storedInstances.get(this.instancePointer);return++this.instancePointer===this.storedInstances.size()&&(this.instancePointer=0),t}}class Config{constructor(){this.configElements=new coreutil_v1.Map,this.configProcessors=new coreutil_v1.List,this.instanceProcessors=new coreutil_v1.List}addAll(n){return this.configElements.addAll(n.getConfigElements()),this.configProcessors.addAll(n.getConfigProcessors()),this.instanceProcessors.addAll(n.getInstanceProcessors()),this}addSingleton(n){return this.configElements.set(n.name,new ConfigEntry(n,"SINGLETON")),this}addPrototype(n){return this.configElements.set(n.name,new ConfigEntry(n,"PROTOTYPE")),this}addNamedSingleton(n,t){return this.configElements.set(n,new ConfigEntry(t,"SINGLETON")),this}addNamedPrototype(n,t){return this.configElements.set(n,new ConfigEntry(t,"PROTOTYPE")),this}getConfigElements(){return this.configElements}getConfigProcessors(){return this.configProcessors}getInstanceProcessors(){return this.instanceProcessors}addConfigProcessor(n){this.configProcessors.add(n)}addInstanceProcessor(n){this.instanceProcessors.add(n)}}const LOG=new coreutil_v1.Logger("Injector");class Injector{static getInstance(){return injector}constructor(){this.config=new Config,this.configProcessorPromises=new coreutil_v1.List}load(n){this.finishedLoading=new Promise((n,t)=>{n()});const t=this.preloadConfigEntries(n);this.config.addAll(n),this.performInjections(n);let e=this.executeConfigProcessors(n,this.config.getConfigProcessors());this.configProcessorPromises.addAll(e),this.executeInstanceProcessors(t,!0),Promise.all(this.configProcessorPromises.getArray()).then(n=>{this.configProcessorPromises=new coreutil_v1.List})}inject(n){return this.injectFields(n,0),this.executeInstanceProcessors(new coreutil_v1.List([n])),n}prototypeInstance(n,t){const e=n.name,s=this.config.getConfigElements().get(e);if(!s)throw LOG.error("No config found for class: "+e),"No config found for class: "+e;if("PROTOTYPE"!==s.getInjectionType())throw LOG.error("Config for class: "+e+" is not a prototype"),"Config for class: "+e+" is not a prototype";const o=this.getInstanceByClassReference(e,0,t);return this.executeInstanceProcessors(new coreutil_v1.List([o])),o}executeConfigProcessors(n,t){const e=new coreutil_v1.List;return t.forEach((t,s)=>{const o=t.processConfig(n);o&&e.add(o);return!0},this),e}executeInstanceProcessors(n,t=!1){let e=()=>{this.config.getInstanceProcessors().forEach((t,e)=>{n.forEach((n,e)=>{t.processInstance(n);return!0},this);return!0},this)};t?this.finishedLoading=Promise.all(this.configProcessorPromises.getArray()).then(n=>{e()}):e()}getFinishedLoadingPromise(){return this.finishedLoading}preloadConfigEntries(n){const t=new coreutil_v1.List;return n.getConfigElements().forEach((e,s,o)=>{s.preload();t.addAll(s.getStoredInstances());s.getInstance()&&s.getInstance().processConfig&&n.addConfigProcessor(s.getInstance());s.getInstance()&&s.getInstance().processInstance&&n.addInstanceProcessor(s.getInstance());return!0},this),t}performInjections(n){n.getConfigElements().forEach((n,t,e)=>{t.getStoredInstances().forEach((n,t)=>{this.injectFields(n,0);return!0},e);return!0},this)}injectFields(n,t){for(const e in n)if(void 0!==e&&null!==e&&null!=n[e]&&n[e].prototype instanceof Object){const s=this.getInstanceByClassReference(n[e].name,t);void 0!==s&&null!==s?n[e]=s:void 0===s&&LOG.error("No instance found when trying to inject field '"+e+"' in '"+n.constructor.name+"'")}return n.postInject&&n.postInject(this),n}getInstanceByClassReference(n,t,e=[]){let s=null;return Injector.name===n?this:(this.config.getConfigElements().forEach((o,i,r)=>{if(o===n){if(s=i.getInstance(e),"PROTOTYPE"===i.getInjectionType()){if(!(t<3))throw"Structure of managed objects is too deep when trying to inject "+n;this.injectFields(s,t++)}return!1}return!0},this),s||LOG.error("No object found for "+n),s)}}const injector=new Injector,LOG$1=new coreutil_v1.Logger("PostConfigInstanceProcessor");class PostConfigInstanceProcessor{processInstance(n){n.postConfig&&n.postConfig()}}exports.Config=Config,exports.ConfigEntry=ConfigEntry,exports.Injector=Injector,exports.PostConfigInstanceProcessor=PostConfigInstanceProcessor;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
