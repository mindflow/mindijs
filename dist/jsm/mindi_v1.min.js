import{Logger as e,List as n,Map as t}from"./coreutil_v1.js";class s{constructor(){this.configEntries=null,this.configProcessors=null,this.instanceProcessors=null}finalize(){}isFinalized(){return!1}}class r{injectTarget(e,n,t=0){}}class i{static get NEW_INSTANCE(){return 0}static get EXISTING_INSTANCE(){return 1}static holderWithNewInstance(e){return new i(e,i.NEW_INSTANCE)}static holderWithExistingInstance(e){return new i(e,i.EXISTING_INSTANCE)}constructor(e,n){this.instance=e,this.type=n}}class o{static get NEW(){return"NEW"}static get CONFIGURED(){return"CONFIGURED"}constructor(e,n){this.name=e,this.classReference=n,this.stage=o.NEW}instanceHolder(e=[]){return null}}const c=new e("ConfigAccessor");class a{static instanceHolder(e,n,t=[]){const s=this.typeConfigByName(e,n);if(null===s)return c.error("No typeconfig found for "+e),null;const r=s.instanceHolder(t);return r||c.error("No object found for "+e),r}static typeConfigByName(e,n){let t=null;return n.configEntries.forEach(((n,s,r)=>n!==e||(t=s,!1)),this),t||c.error("No config entry found for "+e),t}}new e("Provider");class l{get(e=[]){return null}}class h{static get INSTANCE_TYPE(){return 0}static get PROVIDER_TYPE(){return 1}static instanceByName(e,n,t=[]){return new h(e,n,h.INSTANCE_TYPE,t)}static instance(e,n=[]){return new h(e.name,e,h.INSTANCE_TYPE,n)}static providerByName(e,n){return new h(e,n,h.PROVIDER_TYPE)}static provider(e){return new h(e.name,e,h.PROVIDER_TYPE)}constructor(e,n,t=h.INSTANCE_TYPE,s=null){this.name=e,this.classReference=n,this.type=t,this.parameters=s}}new e("InstanceProcessorExecutor");class u{static execute(e,n){return n.instanceProcessors.promiseChain(((t,s)=>a.instanceHolder(t,n).instance.process(e)),this)}}class d extends l{constructor(e,n,t){super(),this.typeConfig=e,this.injector=n,this.config=t}get(e=[]){const n=a.instanceHolder(this.typeConfig.name,this.config,e);return n.type===i.NEW_INSTANCE?this.injector.injectTarget(n.instance,this.config):Promise.resolve(n.instance)}}new e("MindiInjector");class f extends r{static inject(e,n){return g.injectTarget(e,n)}static getInstance(){return g}injectTarget(e,t,s=0){if(!e)throw Error("Missing target object");if(!t)throw Error("Missing config");if(!t.isFinalized())throw Error("Config not finalized");if(s>10)throw Error("Injection structure too deep");const r=this,i=new n(Object.keys(e));return new Promise(((n,o)=>i.promiseChain(((n,i)=>f.injectProperty(e,n,t,s,r))).then((()=>{u.execute(e,t).then((()=>{n(e)}))}))))}static injectProperty(e,n,t,s,r){const i=e[n];return i instanceof h?i.type===h.PROVIDER_TYPE?(f.injectPropertyProvider(e,n,t,r),Promise.resolve()):f.injectPropertyInstance(e,n,t,s,r):Promise.resolve()}static injectPropertyProvider(e,n,t,s){const r=e[n],i=a.typeConfigByName(r.name,t);e[n]=new d(i,s,t)}static injectPropertyInstance(e,n,t,s,r){let o=Promise.resolve();const c=e[n],l=a.instanceHolder(c.name,t,c.parameters);return l.type===i.NEW_INSTANCE&&(o=r.injectTarget(l.instance,t,s++)),e[n]=l.instance,o}}const g=new f;new e("ConfigProcessorExecutor");class E{static execute(e,n,t){return e.promiseChain(((e,s)=>new Promise(((s,r)=>{let o=Promise.resolve();const c=a.instanceHolder(e,t);c.type===i.NEW_INSTANCE&&(o=n.injectTarget(c.instance,t)),o.then((()=>{const e=E.prepareUnconfiguredConfigEntries(t.configEntries);c.instance.processConfig(t,e).then((()=>{s()}))}))}))))}static prepareUnconfiguredConfigEntries(e){const n=new t;return e.forEach(((e,t,s)=>{const r=t;return r.stage===o.NEW&&(n.set(e,r),r.stage=o.CONFIGURED),!0}),this),n}}new e("SingletonConfig");class P extends o{static named(e,n){return new P(e,n)}static unnamed(e){return new P(e.name,e)}constructor(e,n){super(e,n)}instanceHolder(e=[]){return this.instance?i.holderWithExistingInstance(this.instance):(e&&e.length>0?this.instance=new this.classReference(...e):this.instance=new this.classReference,i.holderWithNewInstance(this.instance))}}class m{process(e){return Promise.resolve()}}class p{processConfig(e,n){return Promise.resolve()}}new e("Config");class N extends s{constructor(){super(),this.finalized=!1,this.configEntries=new t,this.configProcessors=new n,this.instanceProcessors=new n}merge(e){this.finalized=!0;const s=new t;s.addAll(this.configEntries),s.addAll(e.configEntries);const r=new n;r.addAll(this.configProcessors),r.addAll(e.configProcessors);const i=new n;return i.addAll(this.instanceProcessors),i.addAll(e.instanceProcessors),this.configEntries=s,this.configProcessors=r,this.instanceProcessors=i,this}addTypeConfig(e){return this.finalized=!1,this.configEntries.set(e.name,e),this}addConfigProcessor(e){return this.configProcessors.add(e.name),this.addTypeConfig(P.unnamed(e))}addInstanceProcessor(e){return this.instanceProcessors.add(e.name),this.addTypeConfig(P.unnamed(e))}addAllTypeConfig(e){return this.finalized=!1,e.forEach(((e,n)=>(this.configEntries.set(e.name,e),!0)),this),this}addAllConfigProcessor(e){return e.forEach(((e,n)=>(this.configProcessors.add(e.name),this.addTypeConfig(P.unnamed(e)),!0)),this),this}addAllInstanceProcessor(e){return e.forEach(((e,n)=>(this.instanceProcessors.add(e.name),this.addTypeConfig(P.unnamed(e)),!0)),this),this}isFinalized(){return this.finalized}finalize(){return this.finalized=!0,E.execute(this.configProcessors,f.getInstance(),this)}}new e("InstancePostConfigTrigger");class w extends m{process(e){let n=null;if(e.postConfig&&(n=e.postConfig()),n||(n=new Promise(((e,n)=>{e()}))),!n instanceof Promise)throw"postConfig() must return either undefined or null or a Promise";return n}}class C extends o{static named(e,n,t){return new C(e,n,t)}static unnamed(e,n){return new C(e.name,e,n)}constructor(e,n,t){super(e,n),this.poolSize=t}instanceHolder(e=[]){}}class I extends o{static named(e,n){return new I(e,n)}static unnamed(e){return new I(e.name,e)}constructor(e,n){super(e,n)}instanceHolder(e=[]){let n=null;return n=e&&e.length>0?new this.classReference(...e):new this.classReference,i.holderWithNewInstance(n)}}export{s as Config,a as ConfigAccessor,p as ConfigProcessor,E as ConfigProcessorExecutor,h as InjectionPoint,r as Injector,i as InstanceHolder,w as InstancePostConfigTrigger,m as InstanceProcessor,u as InstanceProcessorExecutor,N as MindiConfig,f as MindiInjector,d as MindiProvider,C as PoolConfig,I as PrototypeConfig,l as Provider,P as SingletonConfig,o as TypeConfig};
