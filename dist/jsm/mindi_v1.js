import{List,Map,Logger}from"./coreutil_v1.js";class ConfigEntry{constructor(n,t,e){this.classReference=n,this.injectionType=t,this.poolSize=e,this.storedInstances=null,this.instancePointer=0}preload(){if(this.instancePointer=0,this.storedInstances=new List,"SINGLETON"===this.injectionType)this.storedInstances.add(new this.classReference);else if("POOL"===this.injectionType)for(i=0;i<this.poolSize;i++)this.storedInstances.add(new this.classReference);else if("PROTOTYPE"!==this.injectionType)throw"Unknown injectionType "+this.injectionType}getClassReference(){return this.classReference}getInjectionType(){return this.injectionType}getStoredInstances(){if(null===this.storedInstances)throw"Config entry has not been instansiated: "+this.classReference.name;return this.storedInstances}getInstance(n=[]){if("PROTOTYPE"===this.injectionType)return new this.classReference(...n);var t=this.storedInstances.get(this.instancePointer);return++this.instancePointer===this.storedInstances.size()&&(this.instancePointer=0),t}}class Config{constructor(){this.configElements=new Map,this.configProcessors=new List,this.instanceProcessors=new List}addAll(n){return this.configElements.addAll(n.getConfigElements()),this.configProcessors.addAll(n.getConfigProcessors()),this.instanceProcessors.addAll(n.getInstanceProcessors()),this}addSingleton(n){return this.configElements.set(n.name,new ConfigEntry(n,"SINGLETON")),this}addPrototype(n){return this.configElements.set(n.name,new ConfigEntry(n,"PROTOTYPE")),this}addNamedSingleton(n,t){return this.configElements.set(n,new ConfigEntry(t,"SINGLETON")),this}addNamedPrototype(n,t){return this.configElements.set(n,new ConfigEntry(t,"PROTOTYPE")),this}getConfigElements(){return this.configElements}getConfigProcessors(){return this.configProcessors}getInstanceProcessors(){return this.instanceProcessors}addConfigProcessor(n){this.configProcessors.add(n)}addInstanceProcessor(n){this.instanceProcessors.add(n)}}const LOG=new Logger("Injector");class Injector{static getInstance(){return injector}constructor(){this.config=new Config,this.configProcessorPromises=new List}load(n){this.finishedLoading=new Promise((n,t)=>{n()});let t=this.preloadConfigEntries(n);this.config.addAll(n),this.performInjections(n);let e=this.executeConfigProcessors(n,this.config.getConfigProcessors());this.configProcessorPromises.addAll(e),this.executeInstanceProcessors(t,!0),Promise.all(this.configProcessorPromises.getArray()).then(n=>{this.configProcessorPromises=new List})}inject(n){return this.injectFields(n,0),this.executeInstanceProcessors(new List([n])),n}prototypeInstance(n,t){let e=n.name,s=this.config.getConfigElements().get(e);if(!s)throw LOG.error("No config found for class: "+e),"No config found for class: "+e;if(!1===s.getInjectionType())throw LOG.error("Config for class: "+e+" is not a prototype"),"Config for class: "+e+" is not a prototype";let i=this.getInstanceByClassReference(e,0,t);return this.executeInstanceProcessors(new List([i])),i}executeConfigProcessors(n,t){let e=new List;return t.forEach((t,s)=>{let i=t.processConfig(n);i&&e.add(i);return!0},this),e}executeInstanceProcessors(n,t=!1){let e=()=>{this.config.getInstanceProcessors().forEach((t,e)=>{n.forEach((n,e)=>{t.processInstance(n);return!0},this);return!0},this)};t?this.finishedLoading=Promise.all(this.configProcessorPromises.getArray()).then(n=>{e()}):e()}getFinishedLoadingPromise(){return this.finishedLoading}preloadConfigEntries(n){let t=new List;return n.getConfigElements().forEach((e,s,i)=>{s.preload();t.addAll(s.getStoredInstances());s.getInstance()&&s.getInstance().processConfig&&n.addConfigProcessor(s.getInstance());s.getInstance()&&s.getInstance().processInstance&&n.addInstanceProcessor(s.getInstance());return!0},this),t}performInjections(n){n.getConfigElements().forEach((n,t,e)=>{t.getStoredInstances().forEach((n,t)=>{this.injectFields(n,0);return!0},e);return!0},this)}injectFields(n,t){for(var e in n)if(void 0!==e&&null!==e&&null!=n[e]&&n[e].prototype instanceof Object){var s=this.getInstanceByClassReference(n[e].name,t);void 0!==s&&null!==s?n[e]=s:void 0===s&&LOG.error("No instance found when trying to inject field '"+e+"' in '"+n.constructor.name+"'")}return n.postInject&&n.postInject(this),n}getInstanceByClassReference(n,t,e=[]){let s=null;return Injector.name===n?this:(this.config.getConfigElements().forEach((i,o,r)=>{if(i===n){if(s=o.getInstance(e),"PROTOTYPE"===o.getInjectionType()){if(!(t<3))throw"Structure of managed objects is too deep when trying to inject "+n;this.injectFields(s,t++)}return!1}return!0},this),s||LOG.error("No object found for "+n),s)}}const injector=new Injector,LOG$1=new Logger("InstanceProcessor");class InstanceProcessor{processInstance(n){n.postConfig&&n.postConfig()}}export{Config,ConfigEntry,Injector,InstanceProcessor};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWluZGlfdjEuanMiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9taW5kaS9jb25maWdFbnRyeS5qcyIsIi4uLy4uL3NyYy9taW5kaS9jb25maWcuanMiLCIuLi8uLi9zcmMvbWluZGkvaW5qZWN0b3IuanMiLCIuLi8uLi9zcmMvbWluZGkvaW5zdGFuY2VQcm9jZXNzb3IuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTGlzdCB9IGZyb20gXCJjb3JldXRpbF92MVwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIENvbmZpZ0VudHJ5IHtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihjbGFzc1JlZmVyZW5jZSwgaW5qZWN0aW9uVHlwZSwgcG9vbFNpemUpIHtcclxuICAgICAgICB0aGlzLmNsYXNzUmVmZXJlbmNlID0gY2xhc3NSZWZlcmVuY2U7XHJcbiAgICAgICAgdGhpcy5pbmplY3Rpb25UeXBlID0gaW5qZWN0aW9uVHlwZTtcclxuICAgICAgICB0aGlzLnBvb2xTaXplID0gcG9vbFNpemU7XHJcbiAgICAgICAgdGhpcy5zdG9yZWRJbnN0YW5jZXMgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuaW5zdGFuY2VQb2ludGVyID0gMDtcclxuICAgIH1cclxuXHJcbiAgICBwcmVsb2FkKCkge1xyXG4gICAgICAgIHRoaXMuaW5zdGFuY2VQb2ludGVyID0gMDtcclxuICAgICAgICB0aGlzLnN0b3JlZEluc3RhbmNlcyA9IG5ldyBMaXN0KCk7XHJcbiAgICAgICAgaWYoXCJTSU5HTEVUT05cIiA9PT0gdGhpcy5pbmplY3Rpb25UeXBlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc3RvcmVkSW5zdGFuY2VzLmFkZChuZXcgdGhpcy5jbGFzc1JlZmVyZW5jZSgpKTtcclxuICAgICAgICB9IGVsc2UgaWYgKFwiUE9PTFwiID09PSB0aGlzLmluamVjdGlvblR5cGUpIHtcclxuICAgICAgICAgICAgZm9yKGkgPSAwIDsgaSA8IHRoaXMucG9vbFNpemUgOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3RvcmVkSW5zdGFuY2VzLmFkZChuZXcgdGhpcy5jbGFzc1JlZmVyZW5jZSgpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSBpZiAoXCJQUk9UT1RZUEVcIiA9PT0gdGhpcy5pbmplY3Rpb25UeXBlKSB7XHJcbiAgICAgICAgICAgIC8vIE5ldyBpbnN0YW5jZSBldmVyeSB0aW1lXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhyb3cgXCJVbmtub3duIGluamVjdGlvblR5cGUgXCIgKyB0aGlzLmluamVjdGlvblR5cGU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGdldENsYXNzUmVmZXJlbmNlKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNsYXNzUmVmZXJlbmNlO1xyXG4gICAgfVxyXG5cclxuICAgIGdldEluamVjdGlvblR5cGUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5qZWN0aW9uVHlwZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEByZXR1cm5zIHtMaXN0fSB0aGUgbGlzdCBvZiBzdG9yZWQgaW5zdGFuY2VzXHJcbiAgICAgKi9cclxuICAgIGdldFN0b3JlZEluc3RhbmNlcygpIHtcclxuICAgICAgICBpZih0aGlzLnN0b3JlZEluc3RhbmNlcyA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aHJvdyBcIkNvbmZpZyBlbnRyeSBoYXMgbm90IGJlZW4gaW5zdGFuc2lhdGVkOiBcIiArIHRoaXMuY2xhc3NSZWZlcmVuY2UubmFtZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RvcmVkSW5zdGFuY2VzO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogXHJcbiAgICAgKiBAcGFyYW0ge2FycmF5fSBwYXJhbWV0ZXJzIHRoZSBwYXJhbWV0ZXJzIHRvIHVzZSBmb3IgdGhlIGNsYXNzIGlmIGl0IGlzIGNvbmZpZ3VyZWQgYXMgYSBwcm90b3R5cGVcclxuICAgICAqL1xyXG4gICAgZ2V0SW5zdGFuY2UocGFyYW1ldGVycyA9IFtdKSB7XHJcblxyXG4gICAgICAgIGlmKFwiUFJPVE9UWVBFXCIgPT09IHRoaXMuaW5qZWN0aW9uVHlwZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IHRoaXMuY2xhc3NSZWZlcmVuY2UoLi4ucGFyYW1ldGVycyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBHZXQgdGhlIGluc3RhbmNlIGZyb20gdGhlIG5leHQgcG9zaXRpb24gaW4gdGhlIHBvb2xcclxuICAgICAgICB2YXIgaW5zdGFuY2UgPSB0aGlzLnN0b3JlZEluc3RhbmNlcy5nZXQodGhpcy5pbnN0YW5jZVBvaW50ZXIpO1xyXG4gICAgICAgIHRoaXMuaW5zdGFuY2VQb2ludGVyICsrO1xyXG4gICAgICAgIGlmKHRoaXMuaW5zdGFuY2VQb2ludGVyID09PSB0aGlzLnN0b3JlZEluc3RhbmNlcy5zaXplKCkpIHtcclxuICAgICAgICAgICAgdGhpcy5pbnN0YW5jZVBvaW50ZXIgPSAwO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gaW5zdGFuY2U7XHJcbiAgICB9XHJcblxyXG5cclxufSIsImltcG9ydCB7TWFwLCBMaXN0fSBmcm9tIFwiY29yZXV0aWxfdjFcIjtcclxuaW1wb3J0IHtDb25maWdFbnRyeX0gZnJvbSBcIi4vY29uZmlnRW50cnkuanNcIlxyXG5cclxuZXhwb3J0IGNsYXNzIENvbmZpZyB7XHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5jb25maWdFbGVtZW50cyA9IG5ldyBNYXAoKTtcclxuICAgICAgICB0aGlzLmNvbmZpZ1Byb2Nlc3NvcnMgPSBuZXcgTGlzdCgpO1xyXG4gICAgICAgIHRoaXMuaW5zdGFuY2VQcm9jZXNzb3JzID0gbmV3IExpc3QoKTtcclxuICAgIH1cclxuXHJcbiAgICBhZGRBbGwoY29uZmlnKSB7XHJcbiAgICAgICAgdGhpcy5jb25maWdFbGVtZW50cy5hZGRBbGwoY29uZmlnLmdldENvbmZpZ0VsZW1lbnRzKCkpO1xyXG4gICAgICAgIHRoaXMuY29uZmlnUHJvY2Vzc29ycy5hZGRBbGwoY29uZmlnLmdldENvbmZpZ1Byb2Nlc3NvcnMoKSk7XHJcbiAgICAgICAgdGhpcy5pbnN0YW5jZVByb2Nlc3NvcnMuYWRkQWxsKGNvbmZpZy5nZXRJbnN0YW5jZVByb2Nlc3NvcnMoKSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgYWRkU2luZ2xldG9uKGNsYXNzTmFtZSkge1xyXG4gICAgICAgIHRoaXMuY29uZmlnRWxlbWVudHMuc2V0KGNsYXNzTmFtZS5uYW1lLG5ldyBDb25maWdFbnRyeShjbGFzc05hbWUsXCJTSU5HTEVUT05cIikpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIGFkZFByb3RvdHlwZShjbGFzc05hbWUpIHtcclxuICAgICAgICB0aGlzLmNvbmZpZ0VsZW1lbnRzLnNldChjbGFzc05hbWUubmFtZSxuZXcgQ29uZmlnRW50cnkoY2xhc3NOYW1lLFwiUFJPVE9UWVBFXCIpKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICBhZGROYW1lZFNpbmdsZXRvbihuYW1lLGNsYXNzTmFtZSkge1xyXG4gICAgICAgIHRoaXMuY29uZmlnRWxlbWVudHMuc2V0KG5hbWUsbmV3IENvbmZpZ0VudHJ5KGNsYXNzTmFtZSxcIlNJTkdMRVRPTlwiKSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgYWRkTmFtZWRQcm90b3R5cGUobmFtZSxjbGFzc05hbWUpIHtcclxuICAgICAgICB0aGlzLmNvbmZpZ0VsZW1lbnRzLnNldChuYW1lLG5ldyBDb25maWdFbnRyeShjbGFzc05hbWUsXCJQUk9UT1RZUEVcIikpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHJldHVybnMge01hcH1cclxuICAgICAqL1xyXG4gICAgZ2V0Q29uZmlnRWxlbWVudHMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY29uZmlnRWxlbWVudHM7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAcmV0dXJucyB7TGlzdH1cclxuICAgICAqL1xyXG4gICAgZ2V0Q29uZmlnUHJvY2Vzc29ycygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jb25maWdQcm9jZXNzb3JzO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHJldHVybnMge0xpc3R9XHJcbiAgICAgKi9cclxuICAgIGdldEluc3RhbmNlUHJvY2Vzc29ycygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5pbnN0YW5jZVByb2Nlc3NvcnM7XHJcbiAgICB9XHJcblxyXG4gICAgYWRkQ29uZmlnUHJvY2Vzc29yKGNvbmZpZ1Byb2Nlc3Nvcikge1xyXG4gICAgICAgIHRoaXMuY29uZmlnUHJvY2Vzc29ycy5hZGQoY29uZmlnUHJvY2Vzc29yKTtcclxuICAgIH1cclxuXHJcbiAgICBhZGRJbnN0YW5jZVByb2Nlc3NvcihpbnN0YW5jZVByb2Nlc3Nvcikge1xyXG4gICAgICAgIHRoaXMuaW5zdGFuY2VQcm9jZXNzb3JzLmFkZChpbnN0YW5jZVByb2Nlc3Nvcik7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBDb25maWcgfSBmcm9tIFwiLi9jb25maWcuanNcIjtcclxuaW1wb3J0IHsgTGlzdCwgTG9nZ2VyIH0gZnJvbSBcImNvcmV1dGlsX3YxXCI7XHJcbmltcG9ydCB7IENvbmZpZ0VudHJ5IH0gZnJvbSBcIi4vY29uZmlnRW50cnkuanNcIjtcclxuXHJcbmNvbnN0IExPRyA9IG5ldyBMb2dnZXIoXCJJbmplY3RvclwiKTtcclxuXHJcbmV4cG9ydCBjbGFzcyBJbmplY3RvciB7XHJcblxyXG4gICAgc3RhdGljIGdldEluc3RhbmNlKCkge1xyXG4gICAgICAgIHJldHVybiBpbmplY3RvcjtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLmNvbmZpZyA9IG5ldyBDb25maWcoKTtcclxuICAgICAgICB0aGlzLmNvbmZpZ1Byb2Nlc3NvclByb21pc2VzID0gbmV3IExpc3QoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFxyXG4gICAgICogQHBhcmFtIHtDb25maWd9IGNvbmZpZyBcclxuICAgICAqL1xyXG4gICAgbG9hZChjb25maWcpIHtcclxuICAgICAgICB0aGlzLmZpbmlzaGVkTG9hZGluZyA9IG5ldyBQcm9taXNlKFxyXG4gICAgICAgICAgICAocmVzb2x2ZSwgcmVqZWN0KSA9PiB7IHJlc29sdmUoKTsgfVxyXG4gICAgICAgICk7XHJcblxyXG5cclxuICAgICAgICBsZXQgcHJlbG9hZGVkSW5zdGFuY2VzID0gdGhpcy5wcmVsb2FkQ29uZmlnRW50cmllcyhjb25maWcpO1xyXG5cclxuICAgICAgICB0aGlzLmNvbmZpZy5hZGRBbGwoY29uZmlnKTtcclxuXHJcbiAgICAgICAgdGhpcy5wZXJmb3JtSW5qZWN0aW9ucyhjb25maWcpO1xyXG5cclxuICAgICAgICBsZXQgcHJvbWlzZUxpc3QgPSB0aGlzLmV4ZWN1dGVDb25maWdQcm9jZXNzb3JzKGNvbmZpZywgdGhpcy5jb25maWcuZ2V0Q29uZmlnUHJvY2Vzc29ycygpKTtcclxuICAgICAgICB0aGlzLmNvbmZpZ1Byb2Nlc3NvclByb21pc2VzLmFkZEFsbChwcm9taXNlTGlzdCk7XHJcblxyXG4gICAgICAgIHRoaXMuZXhlY3V0ZUluc3RhbmNlUHJvY2Vzc29ycyhwcmVsb2FkZWRJbnN0YW5jZXMsIHRydWUpO1xyXG5cclxuICAgICAgICBQcm9taXNlXHJcbiAgICAgICAgICAgIC5hbGwodGhpcy5jb25maWdQcm9jZXNzb3JQcm9taXNlcy5nZXRBcnJheSgpKVxyXG4gICAgICAgICAgICAudGhlbigoc3VjY2VzcykgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb25maWdQcm9jZXNzb3JQcm9taXNlcyA9IG5ldyBMaXN0KCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGluamVjdChvYmplY3QpIHtcclxuICAgICAgICB0aGlzLmluamVjdEZpZWxkcyhvYmplY3QsIDApO1xyXG4gICAgICAgIHRoaXMuZXhlY3V0ZUluc3RhbmNlUHJvY2Vzc29ycyhuZXcgTGlzdChbb2JqZWN0XSkpO1xyXG4gICAgICAgIHJldHVybiBvYmplY3Q7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBcclxuICAgICAqIEBwYXJhbSB7Y2xhc3N9IGNsYXNzTmFtZSBcclxuICAgICAqIEBwYXJhbSB7YXJyYXl9IHBhcmFtZXRlckFycmF5IFxyXG4gICAgICovXHJcbiAgICBwcm90b3R5cGVJbnN0YW5jZShjbGFzc05hbWUsIHBhcmFtZXRlckFycmF5KSB7XHJcbiAgICAgICAgLyoqIEB0eXBlIHtDb25maWdFbnRyeX0gKi9cclxuICAgICAgICBsZXQgY2xhc3NOYW1lU3RyaW5nID0gY2xhc3NOYW1lLm5hbWU7XHJcbiAgICAgICAgbGV0IGNvbmZpZyA9IHRoaXMuY29uZmlnLmdldENvbmZpZ0VsZW1lbnRzKCkuZ2V0KGNsYXNzTmFtZVN0cmluZyk7XHJcbiAgICAgICAgaWYoIWNvbmZpZykge1xyXG4gICAgICAgICAgICBMT0cuZXJyb3IoXCJObyBjb25maWcgZm91bmQgZm9yIGNsYXNzOiBcIiArIGNsYXNzTmFtZVN0cmluZyk7XHJcbiAgICAgICAgICAgIHRocm93IFwiTm8gY29uZmlnIGZvdW5kIGZvciBjbGFzczogXCIgKyBjbGFzc05hbWVTdHJpbmc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmKCEgXCJQUk9UT1RZUEVcIiA9PT0gY29uZmlnLmdldEluamVjdGlvblR5cGUoKSkge1xyXG4gICAgICAgICAgICBMT0cuZXJyb3IoXCJDb25maWcgZm9yIGNsYXNzOiBcIiArIGNsYXNzTmFtZVN0cmluZyArIFwiIGlzIG5vdCBhIHByb3RvdHlwZVwiKTtcclxuICAgICAgICAgICAgdGhyb3cgXCJDb25maWcgZm9yIGNsYXNzOiBcIiArIGNsYXNzTmFtZVN0cmluZyArIFwiIGlzIG5vdCBhIHByb3RvdHlwZVwiO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgaW5zdGFuY2UgPSB0aGlzLmdldEluc3RhbmNlQnlDbGFzc1JlZmVyZW5jZShjbGFzc05hbWVTdHJpbmcsIDAsIHBhcmFtZXRlckFycmF5KTtcclxuICAgICAgICB0aGlzLmV4ZWN1dGVJbnN0YW5jZVByb2Nlc3NvcnMobmV3IExpc3QoW2luc3RhbmNlXSkpO1xyXG4gICAgICAgIHJldHVybiBpbnN0YW5jZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFxyXG4gICAgICogQHBhcmFtIHtDb25maWd9IGNvbmZpZyBcclxuICAgICAqIEBwYXJhbSB7TGlzdH0gY29uZmlnUHJvY2Vzc29yc1xyXG4gICAgICogQHJldHVybnMge0xpc3R9XHJcbiAgICAgKi9cclxuICAgIGV4ZWN1dGVDb25maWdQcm9jZXNzb3JzKGNvbmZpZywgY29uZmlnUHJvY2Vzc29ycykge1xyXG4gICAgICAgIGxldCBwcm9taXNlTGlzdCA9IG5ldyBMaXN0KCk7XHJcbiAgICAgICAgY29uZmlnUHJvY2Vzc29ycy5mb3JFYWNoKChlbnRyeSwgcGFyZW50KSA9PiB7XHJcbiAgICAgICAgICAgIGxldCBjb25maWdQcm9jZXNzb3JzUHJvbWlzZSA9IGVudHJ5LnByb2Nlc3NDb25maWcoY29uZmlnKTtcclxuICAgICAgICAgICAgaWYoY29uZmlnUHJvY2Vzc29yc1Byb21pc2UpIHtcclxuICAgICAgICAgICAgICAgIHByb21pc2VMaXN0LmFkZChjb25maWdQcm9jZXNzb3JzUHJvbWlzZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfSwgdGhpcyk7XHJcbiAgICAgICAgcmV0dXJuIHByb21pc2VMaXN0O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogXHJcbiAgICAgKiBAcGFyYW0ge0xpc3R9IGluc3RhbmNlTGlzdCBcclxuICAgICAqL1xyXG4gICAgZXhlY3V0ZUluc3RhbmNlUHJvY2Vzc29ycyhpbnN0YW5jZUxpc3QsIHdhaXRGb3JDb25maWdQcm9jZXNzb3JzID0gZmFsc2UpIHtcclxuXHJcbiAgICAgICAgbGV0IGV4ZWN1dGUgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuY29uZmlnLmdldEluc3RhbmNlUHJvY2Vzc29ycygpLmZvckVhY2goKHByb2Nlc3NvcixwYXJlbnQpID0+IHtcclxuICAgICAgICAgICAgICAgIGluc3RhbmNlTGlzdC5mb3JFYWNoKChpbnN0YW5jZSxwYXJlbnQpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBwcm9jZXNzb3IucHJvY2Vzc0luc3RhbmNlKGluc3RhbmNlKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH0sdGhpcyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfSx0aGlzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmKHdhaXRGb3JDb25maWdQcm9jZXNzb3JzKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZmluaXNoZWRMb2FkaW5nID0gUHJvbWlzZS5hbGwodGhpcy5jb25maWdQcm9jZXNzb3JQcm9taXNlcy5nZXRBcnJheSgpKS50aGVuKChzdWNjZXNzKSA9PiB7IGV4ZWN1dGUoKSB9KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBleGVjdXRlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHJldHVybnMge1Byb21pc2V9XHJcbiAgICAgKi9cclxuICAgIGdldEZpbmlzaGVkTG9hZGluZ1Byb21pc2UoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZmluaXNoZWRMb2FkaW5nO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogXHJcbiAgICAgKiBAcGFyYW0ge0NvbmZpZ30gY29uZmlnIFxyXG4gICAgICovXHJcbiAgICBwcmVsb2FkQ29uZmlnRW50cmllcyhjb25maWcpIHtcclxuICAgICAgICBsZXQgaW5zdGFuY2VzID0gbmV3IExpc3QoKTtcclxuICAgICAgICBjb25maWcuZ2V0Q29uZmlnRWxlbWVudHMoKS5mb3JFYWNoKChrZXksIHZhbHVlLCBwYXJlbnQpID0+IHtcclxuICAgICAgICAgICAgdmFsdWUucHJlbG9hZCgpO1xyXG4gICAgICAgICAgICBpbnN0YW5jZXMuYWRkQWxsKHZhbHVlLmdldFN0b3JlZEluc3RhbmNlcygpKTtcclxuICAgICAgICAgICAgaWYodmFsdWUuZ2V0SW5zdGFuY2UoKSAmJiAodmFsdWUuZ2V0SW5zdGFuY2UoKS5wcm9jZXNzQ29uZmlnKSkge1xyXG4gICAgICAgICAgICAgICAgY29uZmlnLmFkZENvbmZpZ1Byb2Nlc3Nvcih2YWx1ZS5nZXRJbnN0YW5jZSgpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZih2YWx1ZS5nZXRJbnN0YW5jZSgpICYmICh2YWx1ZS5nZXRJbnN0YW5jZSgpLnByb2Nlc3NJbnN0YW5jZSkpIHtcclxuICAgICAgICAgICAgICAgIGNvbmZpZy5hZGRJbnN0YW5jZVByb2Nlc3Nvcih2YWx1ZS5nZXRJbnN0YW5jZSgpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9LCB0aGlzKTtcclxuICAgICAgICByZXR1cm4gaW5zdGFuY2VzO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogXHJcbiAgICAgKiBAcGFyYW0ge0NvbmZpZ30gY29uZmlnIFxyXG4gICAgICovXHJcbiAgICBwZXJmb3JtSW5qZWN0aW9ucyhjb25maWcpIHtcclxuICAgICAgICBjb25maWcuZ2V0Q29uZmlnRWxlbWVudHMoKS5mb3JFYWNoKChrZXksIHZhbHVlLCBwYXJlbnQpID0+IHtcclxuICAgICAgICAgICAgdmFsdWUuZ2V0U3RvcmVkSW5zdGFuY2VzKCkuZm9yRWFjaCgoaW5zdGFuY2VFbnRyeSwgaW5uZXJQYXJlbnQpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuaW5qZWN0RmllbGRzKGluc3RhbmNlRW50cnksIDApO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH0sIHBhcmVudCk7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH0sIHRoaXMpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU3dhcHMgb3V0IGNsYXNzZXMgZm9yIGluc3RhbmNlcyBpbiB0aGUgcHJvdmlkZWQgaW5zdGFuY2VFbnRyeSwgbGltaXRlZCBieSBzdHJ1Y3R1cmVEZXB0aFxyXG4gICAgICogXHJcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gaW5zdGFuY2VFbnRyeSBcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzdHJ1Y3R1cmVEZXB0aCBcclxuICAgICAqL1xyXG4gICAgaW5qZWN0RmllbGRzKGluc3RhbmNlRW50cnksIHN0cnVjdHVyZURlcHRoKSB7XHJcbiAgICAgICAgXHJcbiAgICAgICAgZm9yICh2YXIgZmllbGQgaW4gaW5zdGFuY2VFbnRyeSkge1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgaWYgKGZpZWxkICE9PSB1bmRlZmluZWQgJiYgZmllbGQgIT09IG51bGwgJiYgaW5zdGFuY2VFbnRyeVtmaWVsZF0gIT0gbnVsbCAmJiBpbnN0YW5jZUVudHJ5W2ZpZWxkXS5wcm90b3R5cGUgaW5zdGFuY2VvZiBPYmplY3QpIHtcclxuICAgICAgICAgICAgICAgIHZhciBpbnN0YW5jZSA9IHRoaXMuZ2V0SW5zdGFuY2VCeUNsYXNzUmVmZXJlbmNlKGluc3RhbmNlRW50cnlbZmllbGRdLm5hbWUsIHN0cnVjdHVyZURlcHRoKTtcclxuICAgICAgICAgICAgICAgIGlmIChpbnN0YW5jZSAhPT0gdW5kZWZpbmVkICYmIGluc3RhbmNlICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2VFbnRyeVtmaWVsZF0gPSBpbnN0YW5jZTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaW5zdGFuY2UgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIExPRy5lcnJvcihcIk5vIGluc3RhbmNlIGZvdW5kIHdoZW4gdHJ5aW5nIHRvIGluamVjdCBmaWVsZCAnXCIgKyBmaWVsZCArIFwiJyBpbiAnXCIgKyBpbnN0YW5jZUVudHJ5LmNvbnN0cnVjdG9yLm5hbWUgKyBcIidcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYoaW5zdGFuY2VFbnRyeS5wb3N0SW5qZWN0KSB7XHJcbiAgICAgICAgICAgIGluc3RhbmNlRW50cnkucG9zdEluamVjdCh0aGlzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGluc3RhbmNlRW50cnk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBGaW5kIGNvbmZpZ3VyYXRpb24gZm9yIGNsYXNzIG5hbWUsIGFuZCBpbnN0YW5zaWF0ZSBvciByZXR1cm4gaW5zdGFuY2VzIGJhc2VkXHJcbiAgICAgKiBvbiB3aGV0aGVyIHRoZXkgYWxscmVhZHkgZXhpc3QgYW5kIHdoZXRlciB0aGV5IGFyZSBQUk9UT1RZUEVzIG9yIFNJTkdMRVRPTnNcclxuICAgICAqIFxyXG4gICAgICogQHBhcmFtIHtjbGFzc30gY2xhc3NSZWZlcmVuY2UgXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3RydWN0dXJlRGVwdGggXHJcbiAgICAgKiBAcGFyYW0ge2FycmF5fSBwYXJhbWV0ZXJzIFxyXG4gICAgICovXHJcbiAgICBnZXRJbnN0YW5jZUJ5Q2xhc3NSZWZlcmVuY2UoY2xhc3NOYW1lU3RyaW5nLCBzdHJ1Y3R1cmVEZXB0aCwgcGFyYW1ldGVycyA9IFtdKSB7XHJcbiAgICAgICAgbGV0IGluc3RhbmNlID0gbnVsbDtcclxuICAgICAgICBpZihJbmplY3Rvci5uYW1lID09PSBjbGFzc05hbWVTdHJpbmcpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuY29uZmlnLmdldENvbmZpZ0VsZW1lbnRzKCkuZm9yRWFjaCgoa2V5LCB2YWx1ZSwgcGFyZW50KSA9PiB7XHJcbiAgICAgICAgICAgIGlmKGtleSA9PT0gY2xhc3NOYW1lU3RyaW5nKSB7XHJcbiAgICAgICAgICAgICAgICBpbnN0YW5jZSA9IHZhbHVlLmdldEluc3RhbmNlKHBhcmFtZXRlcnMpO1xyXG4gICAgICAgICAgICAgICAgaWYgKFwiUFJPVE9UWVBFXCIgPT09IHZhbHVlLmdldEluamVjdGlvblR5cGUoKSl7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0cnVjdHVyZURlcHRoIDwgMykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmluamVjdEZpZWxkcyhpbnN0YW5jZSwgc3RydWN0dXJlRGVwdGgrKyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgXCJTdHJ1Y3R1cmUgb2YgbWFuYWdlZCBvYmplY3RzIGlzIHRvbyBkZWVwIHdoZW4gdHJ5aW5nIHRvIGluamVjdCBcIiArIGNsYXNzTmFtZVN0cmluZztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcblxyXG4gICAgICAgIH0sIHRoaXMpO1xyXG4gICAgICAgIGlmKCFpbnN0YW5jZSkge1xyXG4gICAgICAgICAgICBMT0cuZXJyb3IoXCJObyBvYmplY3QgZm91bmQgZm9yIFwiICsgY2xhc3NOYW1lU3RyaW5nKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGluc3RhbmNlO1xyXG4gICAgfVxyXG5cclxufVxyXG5cclxuY29uc3QgaW5qZWN0b3IgPSBuZXcgSW5qZWN0b3IoKTsiLCJpbXBvcnQgeyBMb2dnZXIgfSBmcm9tIFwiY29yZXV0aWxfdjFcIjtcclxuXHJcbmNvbnN0IExPRyA9IG5ldyBMb2dnZXIoXCJJbnN0YW5jZVByb2Nlc3NvclwiKTtcclxuXHJcbi8qKlxyXG4gKiBJbnN0YW5jZSB3aGljaCBjYWxscyBwb3N0Q29uZmlnIG9uIG9iamVjdHMgYWZ0ZXIgY29uZmlnUHJvY2Vzc29yIGlzIGZpbmlzaGVkXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgSW5zdGFuY2VQcm9jZXNzb3Ige1xyXG5cclxuICAgIHByb2Nlc3NJbnN0YW5jZShpbnN0YW5jZSkge1xyXG4gICAgICAgIGlmKGluc3RhbmNlLnBvc3RDb25maWcpIHtcclxuICAgICAgICAgICAgaW5zdGFuY2UucG9zdENvbmZpZygpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbn0iXSwibmFtZXMiOlsiQ29uZmlnRW50cnkiLCJbb2JqZWN0IE9iamVjdF0iLCJjbGFzc1JlZmVyZW5jZSIsImluamVjdGlvblR5cGUiLCJwb29sU2l6ZSIsInRoaXMiLCJzdG9yZWRJbnN0YW5jZXMiLCJpbnN0YW5jZVBvaW50ZXIiLCJMaXN0IiwiYWRkIiwiaSIsIm5hbWUiLCJwYXJhbWV0ZXJzIiwiaW5zdGFuY2UiLCJnZXQiLCJzaXplIiwiQ29uZmlnIiwiY29uZmlnRWxlbWVudHMiLCJNYXAiLCJjb25maWdQcm9jZXNzb3JzIiwiaW5zdGFuY2VQcm9jZXNzb3JzIiwiY29uZmlnIiwiYWRkQWxsIiwiZ2V0Q29uZmlnRWxlbWVudHMiLCJnZXRDb25maWdQcm9jZXNzb3JzIiwiZ2V0SW5zdGFuY2VQcm9jZXNzb3JzIiwiY2xhc3NOYW1lIiwic2V0IiwiY29uZmlnUHJvY2Vzc29yIiwiaW5zdGFuY2VQcm9jZXNzb3IiLCJMT0ciLCJMb2dnZXIiLCJJbmplY3RvciIsImluamVjdG9yIiwiY29uZmlnUHJvY2Vzc29yUHJvbWlzZXMiLCJmaW5pc2hlZExvYWRpbmciLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsInByZWxvYWRlZEluc3RhbmNlcyIsInByZWxvYWRDb25maWdFbnRyaWVzIiwicGVyZm9ybUluamVjdGlvbnMiLCJwcm9taXNlTGlzdCIsImV4ZWN1dGVDb25maWdQcm9jZXNzb3JzIiwiZXhlY3V0ZUluc3RhbmNlUHJvY2Vzc29ycyIsImFsbCIsImdldEFycmF5IiwidGhlbiIsInN1Y2Nlc3MiLCJvYmplY3QiLCJpbmplY3RGaWVsZHMiLCJwYXJhbWV0ZXJBcnJheSIsImNsYXNzTmFtZVN0cmluZyIsImVycm9yIiwiZ2V0SW5qZWN0aW9uVHlwZSIsImdldEluc3RhbmNlQnlDbGFzc1JlZmVyZW5jZSIsImZvckVhY2giLCJlbnRyeSIsInBhcmVudCIsImNvbmZpZ1Byb2Nlc3NvcnNQcm9taXNlIiwicHJvY2Vzc0NvbmZpZyIsImluc3RhbmNlTGlzdCIsIndhaXRGb3JDb25maWdQcm9jZXNzb3JzIiwiZXhlY3V0ZSIsInByb2Nlc3NvciIsInByb2Nlc3NJbnN0YW5jZSIsImluc3RhbmNlcyIsImtleSIsInZhbHVlIiwicHJlbG9hZCIsImdldFN0b3JlZEluc3RhbmNlcyIsImdldEluc3RhbmNlIiwiYWRkQ29uZmlnUHJvY2Vzc29yIiwiYWRkSW5zdGFuY2VQcm9jZXNzb3IiLCJpbnN0YW5jZUVudHJ5IiwiaW5uZXJQYXJlbnQiLCJzdHJ1Y3R1cmVEZXB0aCIsImZpZWxkIiwidW5kZWZpbmVkIiwicHJvdG90eXBlIiwiT2JqZWN0IiwiY29uc3RydWN0b3IiLCJwb3N0SW5qZWN0IiwiSW5zdGFuY2VQcm9jZXNzb3IiLCJwb3N0Q29uZmlnIl0sIm1hcHBpbmdzIjoibURBRWFBLGFBRVRDLFlBQVlDLEVBQWdCQyxFQUFlQyxHQUN2Q0MsS0FBS0gsZUFBaUJBLEVBQ3RCRyxLQUFLRixjQUFnQkEsRUFDckJFLEtBQUtELFNBQVdBLEVBQ2hCQyxLQUFLQyxnQkFBa0IsS0FD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
